#Typecast and slice assignment

# #Type casting in python.

# #String datatype to Int type converting.
# #-------------------------------------------

# a=int("45")   
# print("String value 45 to int :",a)   #  45

# a3=int("one")
# print(a3)          #ValueError: invalid literal for int() with base 10: 'one'

# a1 = int("Rohit45")  #ValueError: invalid literal for int() with base 10: 'Rohit45'
# print(a1)

# a2 = int("45Rohit")
# print(a2)        #ValueError: invalid literal for int() with base 10: '45Rohit'

# a4="123.45"
# print(int(a4))     #ValueError: invalid literal for int() with base 10: '123.45'

# a44=int(float("45.08"))
# print("strint to float ,Float(45.08) to int  : ",a44)   #45

# a8 = int("True")
# print(a8)    #ValueError: invalid literal for int() with base 10: 'True'

# #convert float to int
# #----------------------

# a5 = int(18.08)
# print("float to int, value 18.08 = ",a5)   #18

# a6= int(99.99)
# print("float to int, value 99.99 = ",a6)  #99

# a7 = int(float("123.45"))
# print("String to float,float to int :",a7)    #123

# #Bool to int 
# #-------------
# a9 = int(bool("True"))   #str to bool , bool to int
# print(a9)   # o/p= 1 

# a10 = int(True)
# a11 = int(False)
# print(a10)   # 1
# print(a11)   # 0 
-----------------------------------------------------------------
#tuple to list converting.

# t1 = list(11,22,33,55,76)     #TypeError: list expected at most 1 argument, got 5
# print((t1))      
# print(type(t1))

# t2 = (11,22,33,55,76)
# t3 = list(t2)
# print((t3))         #[11, 22, 33, 55, 76]
# print(type(t3))     #<class 'list'>
# t3.append(23)       #[11, 22, 33, 55, 76, 23]
# print(t3)
# t3.extend([45])    
# print(t3)           #[11, 22, 33, 55, 76, 23, 45]

# lst1 = [11, 22, 33, 55, 76, 23, 45]
# tuple1 = tuple(lst1)
# print(tuple1)         #(11, 22, 33, 55, 76, 23, 45)
# print(type(tuple1))   #<class 'tuple'> 
-------------------------------------------------------------------
##  String

##int to string
##---------------

# int1 = str(45)
# print(int1)     #45
# print(type(int1)) #<class 'str'>

# int2 = str(0)
# print(int2)     # 0   
# print(type(int2)) #<class 'str'>

# long_int = str(1234567890123456789012345)
# print(long_int)     # 1234567890123456789012345  
# print(type(long_int)) #<class 'str'>

##bool to str
##------------

# bool1 = str(True)
# print(bool1)       # True
# print(type(bool1)) #<class 'str'>

# bool2 = str(False)
# print(bool2)       #False
# print(type(bool2)) #<class 'str'>

# bool3 = str("False")
# print(bool3)         #False
# print(type(bool3))   #<class 'str'>

# # float to string
# #------------------

# float1 = str(123.00)
# print(float1)        #123.0    
# print(type(float1))   #<class 'str'>

# float2 = str(99.45)
# print(float2)        #99.45    
# print(type(float2))   #<class 'str'>

# float3 = str(00.123)
# print(float3)        #0.123    
# print(type(float3))   #<class 'str'>

# float4 = str(-123.00234)
# print(float4)        # -123.00234   
# print(type(float4))   #<class 'str'>
---------------------------------------------------------
# # float

# # Integer to float
# #------------------

# int1 = float(77)
# print(int1)   #77.0

# long_int = float(123456789012345678901234567890)
# print("long int to float : ",long_int)     #1.2345678901234568e+29

# mid_int = float(12345678901234567890)
# print("mid int to float : ",mid_int)       #1.2345678901234567e+19

# low_int = float(1234567890)
# print("low int to float : ", low_int)       #1234567890.0 

# #string to float 
# #-----------------

# str1 = float("123.45")
# print(str1)   #123.45

# str2 = float("99")
# print(str2)   # 99.0

# str3 = float("one")
# print(str3)     #ValueError: could not convert string to float: 'one'

# str4 = float("Rohit45")
# print(str4)       #ValueError: could not convert string to float: 'Rohit45'


# # Bool to float 
# # ---------------

# bool1 = float(True)
# print(bool1)     # 1.0
 
# bool2 = float(False)
# print(bool2)      # 0.0

# bool3 = float(bool("True"))
# print(bool3)        # 1.0 
-----------------------------------------------------------------------------
##Bool

##int to bool
##-----------

# int1 = bool(45)
# print(int1)    # True

# int2 = bool(0)
# print(int2)    #False

# long_int1 = bool(123456789012345678901234567890)
# print(long_int1)   #True

# long_int2 = bool(09)
# print(long_int2)   
# '''output : Syntax Error: leading zeros in decimal integer literals are not permitted; 
# use an 0o prefix for octal integers '''

##float to bool

# float1 = bool(123.456)
# print(float1)   #True 

# float2 = bool(000.456)
# print(float2)   #True 

# float3 = bool(000.000)
# print(float3)   #False 

# float4 = bool(-23.456)
# print(float4)   #True 

# float5 = bool(-0.456)
# print(float5)   #True 

##string to bool
##----------------

# str1 = bool("Hello world")
# print(str1)   #True

# str2 = bool(" ")
# print(str2)   #True

# str3 = bool("")
# print(str3)   # False

# str4 = bool("123")
# print(str4)   #True
-------------------------------------------------------------------------
# slice practice

text = "Python is a popular programming language."
print(len(text))

# print(text[::])            #Python is a popular programming language.
# print(text[:-10:-1])       #.egaugnal
# print(text[25:-1:2])       #amn agae
# print(text[1::1])          #ython is a popular programming language.
# print(text[1:42:-1])       # Empty
# print(text[42:1:-1])       #.egaugnal gnimmargorp ralupop a si noht
# print(text[1:42:3])        #yoiaol oai na.
# print(text[-42:-1:-1])     #empty
# print(text[-41:-10:-1])    #empty
# print(text[-42:-10:1])     #Python is a popular programming
# print(text[-1:-25:2])      #Empty
# print(text[-1:-25:-2])     #.gunlgimropr
# print(text[-1:35:-1])        #.egau

# print(text[::1])           #Python is a popular programming language.
# print(text[::-1])          #.egaugnal gnimmargorp ralupop a si nohtyP

# print(text[::2])           #Pto sapplrpormiglnug.
# print(text[::-2])          #.gunlgimroprlppas otP

# print(text[::4])           #Posplprilu.
# print(text[::-4])          #.ulirplpsoP

# print(text[::7])           #Piprig
# print(text[::-7])          #.am pn

# print(text[::41])          # P
# print(text[::-41])         # . Dot